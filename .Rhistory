set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y <- c(1:10)
x1 <- c(1:10)
x2 <- c(1:10)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
q()
ppois(10/1787, 1/100)
?ppois
ppois(10/1787, 1/100, lower.tail = T)
ppois(10/1787, 1/100, lower.tail = F)
ppois(9, 0.01*1787, lower.tail = F)
ppois(9, 0.01*1787, lower.tail = T)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mse <- sum(w * (x - rep(1.077,4))^2
)
mse <- sum(w * (x - rep(1.077,4))^2)
mse
sum(w * (x - rep(1.077,4))^2)
sum(w * (x - rep(0.0025,4))^2)
sum(w * (x - rep(0.300,4))^2)
sum(w * (x - rep(0.1471,4))^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
data(mtcars)
lm(y ~ x)
lm(y ~ x)
lm(mtcars$mpg ~ mtcars$weght)
lm(mtcars$mpg ~ mtcars$weight)
lm(mtcars$mpg ~ mtcars$weight)
lm(mtcars$weight ~ mtcars$mpg)
View(mtcars)
lm(mtcars$mpg ~ mtcars$wt)
1.5*0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x[1]
(x[1] - mean(x) ) / sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm (y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum((x- x[0])^2)
sum((x- rep(x[0], length(x))^2)
)
length(x)
sum((x- rep(x[0], 10))^2)
x[0]
x[1]
sum((x- rep(x[1], 10))^2)
sum((x- rep(x[2], 10))^2)
sum((x- rep(x[3], 10))^2)
sum((x- rep(x[4], 10))^2)
sum((x- rep(x[5], 10))^2)
sum((x- rep(x[6], 10))^2)
sum((x- rep(x[7], 10))^2)
sum((x- rep(x[8], 10))^2)
sum((x- rep(x[9], 10))^2)
sum((x- rep(x[10], 10))^2)
x[7]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
install.paghages("rCharts")
install.pagkages("rCharts")
install.packages("rCharts")
dTable(airquality, sPaginationType = "full_numbers")
airquality
dTable(airquality, sPaginationType = "full_numbers")
d
head(airquality)
require(rCharts)
require(rCharts)
install.package("ROracle")
install.packages("ROracle")
library(ROracle)
library(RODBC)
install.packages("RODBC")
library(RODBC)
con <- odbcConnect("DD1", user = "pentahodwdes", pwd="pentahodw99des", row_at_time = 500)
con <- odbcConnect("DD1", user = "pentahodwdes", pwd="pentahodw99des", row_at_time = 500)
?odbcConnect
con <- odbcConnect("pentaho")
install.packages("DNI")
con <- odbcConnect(DBI)
con <- odbcConnect("DBI")
install.packages("DBI")
install.packages("ROracle")
install.packages("ROracle", type="source")
library(ROracle)
?desinstall
?install.packages
installed.packages
installed.packages()
remove.packages("RTools")
install.packages("RTools")
version()
library(ORE)
install.packages("ORE")
library(RODBC)
?yaml
?index.RMD
?YAML
names(mtcars)
fit <- lm(mpg ~ cyl + wt)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
summary(lm(mpg ~ cyl + wt, data = mtcars))$coef
summary(lm(mpg ~ cyl, data = mtcars))$coef
fit <- lm(mpg ~ cyl, data = mtcars)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
plot(wt, mpg, pch=19)
fit <- lm(mpg ~ cyl + wt, data = mtcars, data = mtcars)
plot(mtcars$wt, mtcars$mpg, pch=19)
plot(mtcars$wt, mtcars$mpg, pch=19, col = ((mtcars$cyl=1)*1+1)
)
View(mtcars)
str(mtcars)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("caret")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
training <- segmentationOriginal(Case)
training <- segmentationOriginal[Case, ]
training <- segmentationOriginal[segmentationOrignial[Case=1],]
head[segmentationOriginal[Case]
]
head[segmentationOriginal$Case]
segmentationOriginal$Case
segmentationOriginal[segmentationOriginal$Case==1,]
segmentationOriginal[segmentationOriginal$Case=1,]
segmentationOriginal[segmentationOriginal$Case=1]
segmentationOriginal[(segmentationOriginal$Case=1),]
a <- segmentationOriginal[(segmentationOriginal$Case=1),]
View(a)
a <- segmentationOriginal[Case=1),]
a <- segmentationOriginal[Case=1 ,]
a <- segmentationOriginal[(Case=1) ,]
a
View(a)
View(a)
segmentationOriginal$Case
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
a <- segmentationOriginal[(Case=1) ,]
View(a)
a <- segmentationOriginal[Case=1 ,]
a <- segmentationOriginal[segmentationOriginal$Case=1 ,]
a <- segmentationOriginal[segmentationOriginal$Case==1 ,]
View(a)
a <- segmentationOriginal[segmentationOriginal$Case=="Train",]
View(a)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
View(testing)
View(training)
?seed
?seed
?seed()
?seed
?seeding
?seeding(J)
name(training)
names(training)
modFit <- train(Class ~ ., method= rpart, data=training)
modFit <- train(Class ~ ., method= "rpart", data=training)
library(caret)
modFit <- train(Class ~ ., method= "rpart", data=training)
library(e1071)
install.packages("e1071")
modFit <- train(Class ~ ., method= "rpart", data=training)
print(modFit$finalModel)
names(testing)
print(modFit$finalModel)
head(testing)
View(testing)
newdata = c(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2 )
newdata = c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
newdata
predict(modFit(newdata))
newdata1 = c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 )
predict(modFit(newdata=newdata1))
modFit <- train(Class ~ ., method= "rpart", data=training)
predict(modFit(newdata=newdata1))
predict(modFit,newdata=newdata1)
print(modFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalMOdel)
fancyRpartPlot(modFit$finalModel)
text(modFit$finalModel, use.n=TRUE, all=T,cex=.8)
text(modFit$finalModel, use.n=TRUE, all=TRUE,cex=.8)
plot(modFit$finalModel, uniforme=T)
plot(modFit$finalModel, uniform=T)
plot(modFit$finalModel, uniform=TRUE)
plot(modFit$finalModel, uniform=TRUE)
plot(modFit$finalModel, uniform=TRUE)
?predict
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("olive")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
?seed()
seed(13234)
library(datasets); data(swiss); require(stats); require(graphics)
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50))
?param
?para
?plot
par()
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50))
par(RESET=TRUE)
par(reset=TRUE)
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50))
par()
summary(lm(Fertility ~ . , data = swiss)
)
summary(lm(y ~ x1 + x2))$coef
Estimate
summary(lm(y ~ x1 + x2))$coef
summary(lm(Fertility ~ Agriculture, data = swiss))$coefficients
n <- 100; x2 <- 1 : n; x1 <- .01 * x2 + runif(n, -.1, .1); y = -x1 + x2 + rnorm(n, sd = .01)
summary(lm(y ~ x1))$coef
summary(lm(y ~ x1 + x2))$coef
z <- swiss$Agriculture + swiss$Education
lm(Fertility ~ . + z, data = swiss)
summary(lm(count ~ spray, data = InsectSprays))$coef
dvtools
packages("dvtools")
dvtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages('devtools')
install.packages('devtools')
runApp
runApp()
setwd("c:/users/34795127-z/Dropbox/______Data_Science_Specialization_2014/9_Developing_Data_Products/Video_Lectures/doc_abo/pruebas_shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
libray(shiny)
library(shiny)
runApp()
x <- 0
runApp()
